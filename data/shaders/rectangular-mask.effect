uniform float4x4 ViewProj;

uniform texture2d image;

uniform float2 mask_position;
uniform float width;
uniform float height;
uniform float zoom;

uniform float2 aspect_ratio;
uniform float2 global_position;
uniform float global_scale;
uniform float max_corner_radius;
uniform float4 corner_radius;

uniform float aa_scale;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

float circleAlpha(float2 uv, float r) {
	float d = distance(uv, float2(0.0f, 0.0f));
	float wd = d * aa_scale;
	return smoothstep(r + wd, r - wd, d);
}

float4 applyRoundedCorners(float2 uv, float2 min_vals, float2 max_vals)
{
	//float2 scaled_uv = uv * aspect_ratio;
	float2 min_vals_max = min_vals + max_corner_radius / aspect_ratio;
	float2 max_vals_max = max_vals - max_corner_radius / aspect_ratio;
	bool safe_zone = !(uv.x < min_vals_max.x || uv.y < min_vals_max.y || uv.x > max_vals_max.x || uv.y > max_vals_max.y);
	float4 color = image.Sample(textureSampler, uv);
	float alpha = color.a;
	float2 local = float2(0.0f, 0.0f);
	if (safe_zone) {
		return color;
	}
	float2 tl = min_vals + corner_radius[0] / aspect_ratio;
	float2 tr = float2(max_vals.x, min_vals.y) + float2(-corner_radius[1], corner_radius[1]) / aspect_ratio;
	float2 bl = float2(min_vals.x, max_vals.y) + float2(corner_radius[2], -corner_radius[2]) / aspect_ratio;
	float2 br = max_vals - corner_radius[3] / aspect_ratio;
	
	if (uv.x < tl.x && uv.y < tl.y) {
		local = (uv - tl) * aspect_ratio;
		alpha *= circleAlpha(local, corner_radius[0]);
	} else if (uv.x > tr.x && uv.y < tr.y) {
		local = (uv - tr) * aspect_ratio;
		alpha *= circleAlpha(local, corner_radius[1]);
	} else if (uv.x < bl.x && uv.y > bl.y) {
		local = (uv - bl) * aspect_ratio;
		alpha *= circleAlpha(local, corner_radius[2]);
	} else if (uv.x > br.x && uv.y > br.y) {
		local = (uv - br) * aspect_ratio;
		alpha *= circleAlpha(local, corner_radius[3]);
	}

	return float4(color.rgb, alpha);
}

float4 applyMask(float2 uv)
{
	float2 dist = uv - mask_position;
	uv = mask_position + (dist / global_scale / zoom);
	float2 position_uv = mask_position;
	float2 crop_uv = float2(width, height) / 2.0 / zoom;

	float2 min_vals = (position_uv - crop_uv);
	float2 max_vals = (position_uv + crop_uv);

	// Must expand out for OpenGL compatibility, rather than using the
	// much more convenient `any`
	bool dont_draw = uv.x < min_vals.x || uv.y < min_vals.y || uv.x > max_vals.x || uv.y > max_vals.y;
	
	return dont_draw ? float4(0.0, 0.0, 0.0, 0.0) : applyRoundedCorners(uv, min_vals, max_vals);
}

VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 sharpCornersImage(VertData v_in) : TARGET
{
	float2 shift = global_position - mask_position;
	float2 uv = v_in.uv - shift;
	return applyMask(uv);
}

float4 roundedCornersImage(VertData v_in) : TARGET
{
    // 1. Sample incoming pixel
	float4 c1 = image.Sample(textureSampler, v_in.uv);
	return c1;
}

technique SharpCorners
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = sharpCornersImage(v_in);
	}
}

technique RoundedCorners
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = roundedCornersImage(v_in);
	}
}

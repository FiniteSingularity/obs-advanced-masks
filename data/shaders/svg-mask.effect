uniform float4x4 ViewProj;

uniform texture2d image;
uniform float2 uv_size;
uniform texture2d svg_image;
uniform float2 svg_uv_size;
uniform float2 offset;
uniform float primary_alpha;
uniform float secondary_alpha;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
};

sampler_state svgSampler {
    Filter = Linear;
    AddressU = Border;
    AddressV = Border;
    BorderColor = 0x00000000;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 mainImage(VertData v_in) : TARGET
{
	float2 coord = v_in.uv * uv_size;
	float2 uv_svg = (coord - offset + svg_uv_size/2.0f) / svg_uv_size;
	float4 svg = svg_image.Sample(svgSampler, uv_svg);
	float4 c = image.Sample(textureSampler, v_in.uv);
	c.a = c.a * svg.a;
	return c;
}

float4 faImage(VertData v_in) : TARGET
{
	float2 coord = v_in.uv * uv_size;
	float2 uv_svg = (coord - offset + svg_uv_size / 2.0f) / svg_uv_size;
	float4 svg = svg_image.Sample(svgSampler, uv_svg);
	float4 c = image.Sample(textureSampler, v_in.uv);
	c.a = c.a * svg.a * (svg.r * (primary_alpha - secondary_alpha) + secondary_alpha);
	return c;
}

technique Draw
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImage(v_in);
	}
}


technique DrawFA
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = faImage(v_in);
	}
}

#include "common.effect"

uniform float4x4 ViewProj;

uniform texture2d image;
uniform float2 uv_size;
uniform float2 mask_position;
uniform float2 global_position;
uniform float global_scale;
uniform float sin_rot;
uniform float cos_rot;
uniform float2 ellipse;
uniform float zoom;
uniform float feather_amount;
uniform float alpha_zero;

uniform float min_brightness;
uniform float max_brightness;
uniform float min_contrast;
uniform float max_contrast;
uniform float min_saturation;
uniform float max_saturation;
uniform float min_hue_shift;
uniform float max_hue_shift;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

/*
 * Original Ellipse SDF code by Inigo Quilez: https://iquilezles.org/articles/distfunctions2d/
 * Converted to OBS HLSL by FiniteSingularity
 */
float SDF(float2 coord, float2 ab)
{
	coord = abs(coord);
	if (coord.x > coord.y) {
		coord = coord.yx;
		ab = ab.yx;
	}
	float l = ab.y * ab.y - ab.x * ab.x;
	float m = ab.x * coord.x / l;
	float m2 = m * m;
	float n = ab.y * coord.y / l;
	float n2 = n * n;
	float c = (m2 + n2 - 1.0f) / 3.0f;
	float c3 = c * c * c;
	float q = c3 + m2 * n2 * 2.0f;
	float d = c3 + m2 * n2;
	float g = m + m * n2;
	float co;
	if (d<0.0f) {
		float h = acos(q / c3) / 3.0f;
		float s = cos(h);
		float t = sin(h) * sqrt(3.0f);
		float rx = sqrt(-c * (s + t + 2.0f) + m2);
		float ry = sqrt(-c * (s - t + 2.0f) + m2);
		co = (ry + sign(l) * rx + abs(g) / (rx * ry) - m) / 2.0f;
	} else {
		float h = 2.0 * m * n * sqrt(d);
		float s = sign(q + h) * pow(abs(q + h), 1.0f / 3.0f);
		float u = sign(q - h) * pow(abs(q - h), 1.0f / 3.0f);
		float rx = -s - u - c * 4.0f + 2.0f * m2;
		float ry = (s - u) * sqrt(3.0f);
		float rm = sqrt(rx * rx + ry * ry);
		co = (ry / sqrt(rm - rx) + 2.0 * g / rm - m) / 2.0;
	}
	float2 r = ab * float2(co, sqrt(1.0 - co * co));
	return length(r - coord) * sign(coord.y - r.y);
}

VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 alphaImage(VertData v_in) : TARGET
{
	float zero = saturate(min(floor(ellipse.x), floor(ellipse.y)));
	float2 coord = v_in.uv * uv_size;
	float2 shift = global_position - mask_position;
	float2 coord_p = coord - shift;
	float2 dist = coord_p - mask_position;
	float2 sample_dist = float2(dist.x * cos_rot - dist.y * sin_rot, dist.x * sin_rot + dist.y * cos_rot);
	float d = SDF(sample_dist, ellipse);
	d = feather_amount > 0.0f ? smoothstep(0.0f, feather_amount, -d + feather_amount) : saturate(-(d - 1.0) * zero);
	
	float4 color = image.Sample(textureSampler, (mask_position + dist / zoom / global_scale) / uv_size);
	return float4(color.rgb, color.a * d);
}

float4 alphaFrameCheckImage(VertData v_in) : TARGET
{
	float zero = saturate(min(floor(ellipse.x), floor(ellipse.y)));
	float2 coord = v_in.uv * uv_size;
	float2 shift = global_position - mask_position;
	float2 coord_p = coord - shift;
	float2 dist = coord_p - mask_position;
	float2 sample_dist = float2(dist.x * cos_rot - dist.y * sin_rot, dist.x * sin_rot + dist.y * cos_rot);
	float d = SDF(sample_dist, ellipse);
	float2 sample_uv = (mask_position + dist / zoom / global_scale) / uv_size;
	float alpha_scale = sample_uv.x >= 0.0f && sample_uv.x <= 1.0f &&
	sample_uv.y >= 0.0f && sample_uv.y <= 1.0f ? 1.0f : 0.0f;
	d = feather_amount > 0.0f ? smoothstep(alpha_zero * alpha_scale, feather_amount, -d + feather_amount) : clamp(-(d - 1.0) * zero, alpha_zero * alpha_scale, 1.0f);
	
	float4 color = image.Sample(textureSampler, (mask_position + dist / zoom / global_scale) / uv_size);
	return float4(color.rgb, color.a * d);
}

float4 adjustmentsImage(VertData v_in) : TARGET
{
	float zero = saturate(min(floor(ellipse.x), floor(ellipse.y)));
	float2 coord = v_in.uv * uv_size;
	float2 dist = coord - mask_position;
	float2 sample_dist = float2(dist.x * cos_rot - dist.y * sin_rot, dist.x * sin_rot + dist.y * cos_rot);
	float d = SDF(sample_dist, ellipse);
	d = feather_amount > 0.0f ? smoothstep(0.0f, feather_amount, -d + feather_amount) : saturate(-(d - 1.0) * zero);
	
	float4 color = image.Sample(textureSampler, v_in.uv);
	float4 color_adj_min = adjustments(
		color,
		min_brightness,
		min_contrast,
		min_saturation,
		min_hue_shift
	);
	float4 color_adj_max = adjustments(
		color,
		max_brightness,
		max_contrast,
		max_saturation,
		max_hue_shift
	);
	return (color_adj_min * (1.0 - d) + color_adj_max * d);
}

technique Alpha
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = alphaImage(v_in);
	}
}

technique AlphaFrameCheck
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = alphaFrameCheckImage(v_in);
	}
}

technique Adjustments
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = adjustmentsImage(v_in);
	}
}
